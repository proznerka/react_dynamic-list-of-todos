{"version":3,"sources":["components/TodoList/TodoList.tsx","helpers/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","selectedUserChangeHandler","className","map","todo","classNames","completed","type","readOnly","checked","title","userId","onClick","id","BASE_URL","getTodos","a","response","fetch","json","getUser","user","CurrentUser","useState","setUser","loadUser","useCallback","userIdToLoad","userInfo","useEffect","name","email","phone","App","setSelectedUserId","setTodos","newSelectedUserId","loadTodos","todoList","ReactDOM","render","document","getElementById"],"mappings":"iVAUaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,eACAC,EAHuC,EAGvCA,0BAHuC,OAKvC,sBAAKC,UAAU,WAAf,UACE,wCAEA,qBAAKA,UAAU,2BAAf,SACE,oBACEA,UAAU,iBACV,UAAQ,cAFV,SAIGH,EAAMI,KAAI,SAACC,GAAD,OACT,qBAEEF,UAAWG,IAAW,iBAAkB,CACtC,6BAA8BD,EAAKE,UACnC,0BAA2BF,EAAKE,YAElC,UAAQ,gBANV,UAQE,kCACE,uBACEC,KAAK,WACLC,UAAQ,EACRC,QAASL,EAAKE,YAEhB,4BAAIF,EAAKM,WAGX,wBACER,UAAWG,IACT,wBACA,SACA,CACE,kCACEL,IAAmBI,EAAKO,SAG9BJ,KAAK,SACL,UAAQ,aACRK,QAAS,kBAAMX,EAA0BG,EAAKO,SAXhD,yBAaYP,EAAKO,YA7BZP,EAAKS,eCzBhBC,EAAW,oCAEV,SAAeC,IAAtB,+B,4CAAO,8BAAAC,EAAA,6DACCC,EAAWC,MAAM,GAAD,OAAIJ,EAAJ,WADjB,SAEgBG,EAFhB,cAEClB,EAFD,OAE0BoB,OAF1B,kBAIEpB,GAJF,4C,sBASA,SAAeqB,EAAtB,kC,4CAAO,WAAuBT,GAAvB,iBAAAK,EAAA,sEACkBE,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBH,IAD5C,cACCM,EADD,gBAEeA,EAFf,cAECI,EAFD,OAEyBF,OAFzB,kBAIEE,GAJF,4C,gCCHMC,EAA+B,SAAC,GAAgB,IAAdX,EAAa,EAAbA,OAC7C,EAAwBY,mBAAsB,MAA9C,mBAAOF,EAAP,KAAaG,EAAb,KAEMC,EAAWC,sBAAW,uCAC1B,WAAOC,GAAP,eAAAX,EAAA,sEACyBI,EAAQO,GADjC,OACQC,EADR,OAGEJ,EAAQI,GAHV,2CAD0B,sDAM1B,IAYF,OATAC,qBACE,WAGE,OAFAJ,EAASd,GAEF,kBAAMa,EAAQ,SAEvB,CAACb,IAID,mCACGU,EAEG,sBAAKnB,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,+DAAyBmB,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMR,QAElE,oBACEX,UAAU,oBACV,UAAQ,WAFV,SAIGmB,EAAKS,OAER,mBAAG5B,UAAU,qBAAb,SAAmCmB,EAAKU,QACxC,mBAAG7B,UAAU,qBAAb,SAAmCmB,EAAKW,WAGzC,sDCaIC,EApDO,WACpB,MAGIV,mBAAS,GAHb,mBACEvB,EADF,KAEEkC,EAFF,KAKA,EAA0BX,mBAAiB,IAA3C,mBAAOxB,EAAP,KAAcoC,EAAd,KAEMlC,EAA4ByB,uBAChC,SAACU,GAAD,OAA+BF,EAAkBE,KACjD,IAGIC,EAAYX,sBAAW,sBAC3B,4BAAAV,EAAA,sEACyBD,IADzB,OACQuB,EADR,OAGEH,EAASG,GAHX,2CAKA,IAUF,OAPAT,qBACE,WACEQ,MAEF,IAIA,sBAAKnC,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,MAAOA,EACPC,eAAgBA,EAChBC,0BAA2BA,MAI/B,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGF,EAEG,cAAC,EAAD,CAAaW,OAAQX,IAErB,2BCjDduC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e23d3258.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  selectedUserId: number;\n  selectedUserChangeHandler: (setSelectedUserId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  selectedUserChangeHandler,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul\n        className=\"TodoList__list\"\n        data-cy=\"listOfTodos\"\n      >\n        {todos.map((todo) => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n            data-cy=\"filterByTitle\"\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                readOnly\n                checked={todo.completed}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames(\n                'TodoList__user-button',\n                'button',\n                {\n                  'TodoList__user-button--selected':\n                    selectedUserId === todo.userId,\n                },\n              )}\n              type=\"button\"\n              data-cy=\"userButton\"\n              onClick={() => selectedUserChangeHandler(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = fetch(`${BASE_URL}/todos`);\n  const todos = (await response).json();\n\n  return todos;\n}\n\n// remember to handle errors\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${BASE_URL}/user/${userId}`);\n  const user = (await response).json();\n\n  return user;\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../helpers/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadUser = useCallback(\n    async (userIdToLoad: number) => {\n      const userInfo = await getUser(userIdToLoad);\n\n      setUser(userInfo);\n    },\n    [],\n  );\n\n  useEffect(\n    () => {\n      loadUser(userId);\n\n      return () => setUser(null);\n    },\n    [userId],\n  );\n\n  return (\n    <>\n      {user\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n        )\n        : (<p>User is loading...</p>)}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './helpers/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const selectedUserChangeHandler = useCallback(\n    (newSelectedUserId: number) => setSelectedUserId(newSelectedUserId),\n    [],\n  );\n\n  const loadTodos = useCallback(\n    async () => {\n      const todoList = await getTodos();\n\n      setTodos(todoList);\n    },\n    [],\n  );\n\n  useEffect(\n    () => {\n      loadTodos();\n    },\n    [],\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          selectedUserChangeHandler={selectedUserChangeHandler}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId\n            ? (\n              <CurrentUser userId={selectedUserId} />\n            )\n            : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}